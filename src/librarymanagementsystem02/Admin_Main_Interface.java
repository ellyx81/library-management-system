/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package librarymanagementsystem02;

import java.awt.Color;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author User
 */
public class Admin_Main_Interface extends javax.swing.JFrame {

    /**
     * Creates new form Admin_Main_Interface
     */
    public Admin_Main_Interface() {
        initComponents();
        this.setLocationRelativeTo(null);
        findRequest();
        findBooks();
        
        findBookRequests();
        displayborrowedhistorytable();
        curDateTime();
            jLabel2.setText(String.valueOf(User.wc).toString());
        
    }
    
     public Connection getConnection(){

        Connection con = null;
        try {
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/librarymanagementsystem001?useSSL=false", "root", "cuteako");
        } catch (SQLException ex) {
            Logger.getLogger(MainMenu.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        return con;
    }
      
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        minimize = new javax.swing.JLabel();
        close = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        booktable = new javax.swing.JTable();
        jLabel13 = new javax.swing.JLabel();
        searchbar1 = new javax.swing.JTextField();
        search1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        borrowedhistory = new javax.swing.JTable();
        jLabel14 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        searchbar2 = new javax.swing.JTextField();
        search3 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        bookrequesttable = new javax.swing.JTable();
        jButton4 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        dateTime = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        requesttable = new javax.swing.JTable();
        searchbar = new javax.swing.JTextField();
        search2 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        gotouserlist = new javax.swing.JButton();
        gotoadminlist = new javax.swing.JButton();
        logout = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jLabel18 = new javax.swing.JLabel();
        deletebookbutton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        txtID = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtTitle = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtAuthor = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtPublisher = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtPubdate = new javax.swing.JTextField();
        txtAvailability = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(228, 233, 237));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(44, 62, 80), 8));

        jPanel5.setBackground(new java.awt.Color(44, 62, 80));
        jPanel5.setForeground(new java.awt.Color(0, 102, 51));

        jLabel15.setBackground(new java.awt.Color(0, 0, 0));
        jLabel15.setFont(new java.awt.Font("Lucida Sans", 1, 36)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(255, 255, 255));
        jLabel15.setText("LIBRARY MANAGEMENT SYSTEM");

        minimize.setFont(new java.awt.Font("Lucida Sans", 1, 24)); // NOI18N
        minimize.setForeground(new java.awt.Color(255, 255, 255));
        minimize.setText("-");
        minimize.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        minimize.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                minimizeMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                minimizeMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                minimizeMouseExited(evt);
            }
        });

        close.setFont(new java.awt.Font("Lucida Sans", 0, 24)); // NOI18N
        close.setForeground(new java.awt.Color(255, 255, 255));
        close.setText("x");
        close.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        close.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                closeMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                closeMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                closeMouseExited(evt);
            }
        });

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/librarymanagementsystem02/bookicon-01.png"))); // NOI18N

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 616, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(minimize)
                .addGap(26, 26, 26)
                .addComponent(close)
                .addGap(25, 25, 25))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(minimize, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(close)))
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel15, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(11, 11, 11))
        );

        jPanel2.setBackground(new java.awt.Color(44, 62, 80));

        booktable.setAutoCreateRowSorter(true);
        booktable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 102, 51)));
        booktable.setFont(new java.awt.Font("Lucida Sans", 0, 12)); // NOI18N
        booktable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Title", "Author", "Publisher", "Publishing Date", "Availability"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        booktable.setGridColor(new java.awt.Color(0, 0, 0));
        booktable.setSelectionBackground(new java.awt.Color(149, 165, 166));
        booktable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                booktableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(booktable);
        if (booktable.getColumnModel().getColumnCount() > 0) {
            booktable.getColumnModel().getColumn(5).setResizable(false);
        }

        jLabel13.setFont(new java.awt.Font("Lucida Sans", 1, 22)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText("LIST OF BOOKS");

        search1.setBackground(new java.awt.Color(44, 62, 80));
        search1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        search1.setForeground(new java.awt.Color(255, 255, 255));
        search1.setText("SEARCH");
        search1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                search1ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(44, 62, 80));
        jButton3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setText("ADD NEW BOOK");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(searchbar1, javax.swing.GroupLayout.PREFERRED_SIZE, 675, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(search1, javax.swing.GroupLayout.DEFAULT_SIZE, 156, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel13)
                .addGap(353, 353, 353))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(327, 327, 327))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchbar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(search1))
                .addGap(5, 5, 5)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton3)
                .addContainerGap())
        );

        jPanel3.setBackground(new java.awt.Color(149, 165, 166));

        borrowedhistory.setAutoCreateRowSorter(true);
        borrowedhistory.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 102, 51)));
        borrowedhistory.setFont(new java.awt.Font("Lucida Sans", 0, 12)); // NOI18N
        borrowedhistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Book ID", "Title", "Status", "Date Borrowed", "Borrower", "Librarian"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        borrowedhistory.setGridColor(new java.awt.Color(0, 0, 0));
        borrowedhistory.setSelectionBackground(new java.awt.Color(149, 165, 166));
        jScrollPane2.setViewportView(borrowedhistory);

        jLabel14.setFont(new java.awt.Font("Lucida Sans", 1, 22)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setText("BORROWED HISTORY");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel14)
                .addGap(151, 151, 151))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(149, 149, 149))
        );

        jPanel4.setBackground(new java.awt.Color(149, 165, 166));

        jLabel17.setFont(new java.awt.Font("Lucida Sans", 1, 18)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(255, 255, 255));
        jLabel17.setText("BORROWED BOOKS");

        search3.setBackground(new java.awt.Color(44, 62, 80));
        search3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        search3.setForeground(new java.awt.Color(255, 255, 255));
        search3.setText("SEARCH");
        search3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                search3ActionPerformed(evt);
            }
        });

        bookrequesttable.setAutoCreateRowSorter(true);
        bookrequesttable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 102, 51)));
        bookrequesttable.setFont(new java.awt.Font("Lucida Sans", 0, 12)); // NOI18N
        bookrequesttable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Borrow ID", "Book ID", "Title", "Status", "Date Borrowed", "Borrower", "Librarian"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        bookrequesttable.setGridColor(new java.awt.Color(0, 0, 0));
        bookrequesttable.setSelectionBackground(new java.awt.Color(149, 165, 166));
        jScrollPane4.setViewportView(bookrequesttable);
        if (bookrequesttable.getColumnModel().getColumnCount() > 0) {
            bookrequesttable.getColumnModel().getColumn(6).setResizable(false);
        }

        jButton4.setBackground(new java.awt.Color(44, 62, 80));
        jButton4.setForeground(new java.awt.Color(255, 255, 255));
        jButton4.setText("Return Book");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton4))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addComponent(jLabel17)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(searchbar2, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(search3))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 413, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 2, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchbar2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(search3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton4)
                .addGap(16, 16, 16))
        );

        jLabel3.setBackground(new java.awt.Color(44, 62, 80));
        jLabel3.setFont(new java.awt.Font("Lucida Sans", 1, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(44, 62, 80));
        jLabel3.setText("Welcome,");

        jLabel2.setFont(new java.awt.Font("Lucida Sans", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(44, 62, 80));
        jLabel2.setText("jLabel2");

        dateTime.setFont(new java.awt.Font("Lucida Sans", 1, 18)); // NOI18N
        dateTime.setForeground(new java.awt.Color(44, 62, 80));
        dateTime.setText("jLabel2");

        jPanel6.setBackground(new java.awt.Color(149, 165, 166));

        requesttable.setAutoCreateRowSorter(true);
        requesttable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 102, 51)));
        requesttable.setFont(new java.awt.Font("Lucida Sans", 0, 12)); // NOI18N
        requesttable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Request ID", "Book ID", "Title", "Availability", "Date Borrowed", "Borrower"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        requesttable.setGridColor(new java.awt.Color(0, 0, 0));
        requesttable.setSelectionBackground(new java.awt.Color(149, 165, 166));
        jScrollPane3.setViewportView(requesttable);

        search2.setBackground(new java.awt.Color(44, 62, 80));
        search2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        search2.setForeground(new java.awt.Color(255, 255, 255));
        search2.setText("SEARCH");
        search2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                search2ActionPerformed(evt);
            }
        });

        jButton5.setBackground(new java.awt.Color(44, 62, 80));
        jButton5.setForeground(new java.awt.Color(255, 255, 255));
        jButton5.setText("Approve");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setBackground(new java.awt.Color(44, 62, 80));
        jButton6.setForeground(new java.awt.Color(255, 255, 255));
        jButton6.setText("Disapprove");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jLabel16.setFont(new java.awt.Font("Lucida Sans", 1, 18)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(255, 255, 255));
        jLabel16.setText("PENDING REQUESTS");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel16)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(searchbar, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(search2))
                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(jPanel6Layout.createSequentialGroup()
                            .addComponent(jButton5)
                            .addGap(18, 18, 18)
                            .addComponent(jButton6))
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 394, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(12, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchbar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(search2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton5)
                    .addComponent(jButton6))
                .addGap(120, 120, 120))
        );

        gotouserlist.setBackground(new java.awt.Color(44, 62, 80));
        gotouserlist.setFont(new java.awt.Font("Lucida Sans", 1, 18)); // NOI18N
        gotouserlist.setForeground(new java.awt.Color(255, 255, 255));
        gotouserlist.setText("BORROWERS");
        gotouserlist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gotouserlistActionPerformed(evt);
            }
        });

        gotoadminlist.setBackground(new java.awt.Color(44, 62, 80));
        gotoadminlist.setFont(new java.awt.Font("Lucida Sans", 1, 18)); // NOI18N
        gotoadminlist.setForeground(new java.awt.Color(255, 255, 255));
        gotoadminlist.setText("LIBRARIANS");
        gotoadminlist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gotoadminlistActionPerformed(evt);
            }
        });

        logout.setBackground(new java.awt.Color(44, 62, 80));
        logout.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        logout.setForeground(new java.awt.Color(255, 255, 255));
        logout.setText("LOGOUT");
        logout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutActionPerformed(evt);
            }
        });

        jPanel7.setBackground(new java.awt.Color(44, 62, 80));

        jButton1.setBackground(new java.awt.Color(44, 62, 80));
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Update Book");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel18.setFont(new java.awt.Font("Lucida Sans", 1, 22)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(255, 255, 255));
        jLabel18.setText("BOOK INFORMATION");

        deletebookbutton.setBackground(new java.awt.Color(44, 62, 80));
        deletebookbutton.setForeground(new java.awt.Color(255, 255, 255));
        deletebookbutton.setText("Delete Book");
        deletebookbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletebookbuttonActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Lucida Sans", 1, 16)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("ID");

        txtID.setText(" ");

        jLabel5.setFont(new java.awt.Font("Lucida Sans", 1, 16)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Title");

        txtTitle.setText(" ");

        jLabel6.setFont(new java.awt.Font("Lucida Sans", 1, 16)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Author");

        txtAuthor.setText(" ");

        jLabel7.setFont(new java.awt.Font("Lucida Sans", 1, 16)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Publisher");

        txtPublisher.setText(" ");

        jLabel8.setFont(new java.awt.Font("Lucida Sans", 1, 16)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Publishing Date");

        txtPubdate.setText(" ");

        txtAvailability.setText(" ");

        jLabel9.setFont(new java.awt.Font("Lucida Sans", 1, 16)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Availability");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtPublisher, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtPubdate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtAvailability)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 52, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(50, 50, 50)
                        .addComponent(deletebookbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(128, 128, 128))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel18)
                        .addGap(163, 163, 163))))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPublisher, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPubdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addGap(4, 4, 4)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtAvailability, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(deletebookbutton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(gotouserlist, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(gotoadminlist, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(logout, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(21, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(dateTime)
                        .addGap(60, 60, 60))))
            .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(gotouserlist, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(gotoadminlist, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(logout)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(dateTime))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void minimizeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_minimizeMouseClicked
        // TODO add your handling code here:
        this.setState(JFrame.ICONIFIED);
    }//GEN-LAST:event_minimizeMouseClicked

    private void minimizeMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_minimizeMouseEntered
        // TODO add your handling code here:

        minimize.setForeground(new Color(149,165,166));
    }//GEN-LAST:event_minimizeMouseEntered

    private void minimizeMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_minimizeMouseExited
        // TODO add your handling code here:

        minimize.setForeground(Color.white);
    }//GEN-LAST:event_minimizeMouseExited

    private void closeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeMouseClicked
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_closeMouseClicked

    private void closeMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeMouseEntered
        // TODO add your handling code here:
        close.setForeground(new Color(149,165,166));
    }//GEN-LAST:event_closeMouseEntered

    private void closeMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeMouseExited
        // TODO add your handling code here:
        close.setForeground(Color.white);
    }//GEN-LAST:event_closeMouseExited
    
    private void search1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_search1ActionPerformed

        findBooks();
    }//GEN-LAST:event_search1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        
        NewBook form = new NewBook();
        form.setVisible(true);
        form.pack();
        form.setLocationRelativeTo(null);
        this.dispose();


    }//GEN-LAST:event_jButton3ActionPerformed

    private void search3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_search3ActionPerformed
        // TODO add your handling code here:
        findBookRequests();
    }//GEN-LAST:event_search3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        Date date = new Date();
        java.sql.Date sqldate = new java.sql.Date(date.getTime());
        
        int[] indexs = bookrequesttable.getSelectedRows();
        int row = bookrequesttable.getSelectedRow();
           Object[] rowz = new Object[7];
           String bookid4, booktitle4, status, dateborrowed, datereturned, borrower, librarian;
           
        DefaultTableModel tblModel = (DefaultTableModel) requesttable.getModel();
        DefaultTableModel tblModelB = (DefaultTableModel) booktable.getModel();
        DefaultTableModel tblModelC = (DefaultTableModel) bookrequesttable.getModel();
        DefaultTableModel tblModelD = (DefaultTableModel) borrowedhistory.getModel();
        
        String cell = bookrequesttable.getModel().getValueAt(row, 0).toString();
        String cell2 = bookrequesttable.getModel().getValueAt(row, 1).toString();
        String cell3 = bookrequesttable.getModel().getValueAt(row, 1).toString();
        
        String sql = "UPDATE borrowedhistory SET status='Returned' WHERE borrowedID = " + cell;
        String sql2 = "UPDATE books SET availability='Available' WHERE bookid = " + cell2;
       
        String sql3 = "UPDATE borrowedhistory SET datereturned = '%"+sqldate+"%' WHERE borrowedID = " + cell3;
   
     //  String sql3 = "insert into requestlist(bookid2, booktitle2, availability2, dateborrowed, borrower) values (?,?,?,?,?)";
  
//     try{
//                    Class.forName("com.mysql.jdbc.Driver");
//                    Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/librarymanagementsystem001?useSSL=false", "root", "cuteako");
//                        
//                    for (int i = 0; i < indexs.length; i++){
//                          //  borrowedID = tblModel.getValueAt(indexs[i], 0).toString();
//                            bookid4 = tblModelC.getValueAt(indexs[i], 1).toString();
//                            booktitle4 = tblModelC.getValueAt(indexs[i], 2).toString();
//                            status = "Returned";
//                            dateborrowed = tblModelC.getValueAt(indexs[i], 4).toString();
//                            datereturned = dateTime.getText();
//                            borrower = tblModelC.getValueAt(indexs[i], 5).toString();
//                            librarian = jLabel2.getText();
//                            //insert query string
//                            String query = "insert into borrowedhistoryreal(bookid4, booktitle4, status, dateborrowed, datereturned, borrower, librarian) values (?,?,?,?,?,?,?)";
//                            //in above query subject is table name
//                            //prepared statement insertion
//                            PreparedStatement prepstmt = con.prepareStatement(query);
//                            prepstmt.setString(1, bookid4);
//                            prepstmt.setString(2, booktitle4);
//                            prepstmt.setString(3, status);
//                            prepstmt.setString(4, dateborrowed);
//                            prepstmt.setString(5, datereturned);
//                             prepstmt.setString(6, borrower);
//                             prepstmt.setString(7, librarian);
//
//                            prepstmt.execute();
//                        }
//                        
//                        //success message
//                        
//                            
//                }
//                catch(Exception e){
//                }
        try{
                    try {
                        Class.forName("com.mysql.jdbc.Driver");
                    } catch (ClassNotFoundException ex) {
                        Logger.getLogger(Admin_Main_Interface.class.getName()).log(Level.SEVERE, null, ex);
                    }
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/librarymanagementsystem001?useSSL=false", "root", "cuteako");
            
             //++++++----------------UPDATE AVAILABILITY IN BOOKS----------------------++++=//
             PreparedStatement prepstmt = con.prepareStatement(sql);
             prepstmt.execute();
              //++++++----------------UPDATE STATUS IN REQUESTLIST----------------------++++=//
             PreparedStatement prepstmt2 = con.prepareStatement(sql2);
             prepstmt2.execute();
             
            
             JOptionPane.showMessageDialog(null, "Returned Book");
             
             //++++++----------------EMPTY TABLE----------------------++++=//
            tblModel.setRowCount(0);
            tblModelB.setRowCount(0);
            tblModelC.setRowCount(0);
            tblModelD.setRowCount(0);
            //++++++----------------REFRESH TABLE----------------------++++=//
            findBooks();
            findRequest();
            findBookRequests();
            displayborrowedhistorytable();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
        
        
    }//GEN-LAST:event_jButton4ActionPerformed

    private void search2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_search2ActionPerformed
        // TODO add your handling code here:
         findRequest();
    }//GEN-LAST:event_search2ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        Date date = new Date();
        java.sql.Date sqldate = new java.sql.Date(date.getTime());
        
        int[] indexs = requesttable.getSelectedRows();
        
        int row = requesttable.getSelectedRow();
        
       
       
        
        DefaultTableModel tblModel = (DefaultTableModel) requesttable.getModel();
        DefaultTableModel tblModelB = (DefaultTableModel) booktable.getModel();
        DefaultTableModel tblModelC = (DefaultTableModel) bookrequesttable.getModel();
      //  DefaultTableModel tblModelD = (DefaultTableModel) borrowedhistory.getModel();
        
        String cell = requesttable.getModel().getValueAt(row, 0).toString();
        String cell2 = requesttable.getModel().getValueAt(row, 1).toString();
       // String cell3 = requesttable.getModel().getValueAt(row, 1).toString();
        
        String sql = "UPDATE requestlist SET availability2='Approved' WHERE requestID = " + cell;
        String sql2 = "UPDATE books SET availability='Not Available' WHERE bookid = " + cell2;
        
        Object[] rowz = new Object[6]; 
        String bookid3, booktitle3, status, dateborrowed, borrower, librarian;
        try{
                    Class.forName("com.mysql.jdbc.Driver");
                    Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/librarymanagementsystem001?useSSL=false", "root", "cuteako");
                        
                    for (int i = 0; i < indexs.length; i++){
                          //  borrowedID = tblModel.getValueAt(indexs[i], 0).toString();
                            bookid3 = tblModel.getValueAt(indexs[i], 1).toString();
                            booktitle3 = tblModel.getValueAt(indexs[i], 2).toString();
                            status = "Borrowed";
                            dateborrowed = dateTime.getText();
                            //datereturned = "";
                            borrower = tblModel.getValueAt(indexs[i], 5).toString();
                            librarian = jLabel2.getText();
                            //insert query string
                            String query = "insert into borrowedhistory(bookid3, booktitle3, status, dateborrowed, borrower, librarian) values (?,?,?,?,?,?)";
                            //in above query subject is table name
                            //prepared statement insertion
                            PreparedStatement prepstmt = con.prepareStatement(query);
                            prepstmt.setString(1, bookid3);
                            prepstmt.setString(2, booktitle3);
                            prepstmt.setString(3, status);
                            prepstmt.setString(4, dateborrowed);
                           // prepstmt.setString(5, datereturned);
                             prepstmt.setString(5, borrower);
                             prepstmt.setString(6, librarian);

                            prepstmt.execute();
                        }
                        
                        //success message
                        
                            
                }
                catch(Exception e){
                }
        try{
                    try {
                        Class.forName("com.mysql.jdbc.Driver");
                    } catch (ClassNotFoundException ex) {
                        Logger.getLogger(Admin_Main_Interface.class.getName()).log(Level.SEVERE, null, ex);
                    }
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/librarymanagementsystem001?useSSL=false", "root", "cuteako");
            
             //++++++----------------UPDATE AVAILABILITY IN BOOKS----------------------++++=//
             PreparedStatement prepstmt = con.prepareStatement(sql);
             prepstmt.execute();
              //++++++----------------UPDATE STATUS IN REQUESTLIST----------------------++++=//
             PreparedStatement prepstmt2 = con.prepareStatement(sql2);
             prepstmt2.execute();
             
            
             JOptionPane.showMessageDialog(null, "Approved");
             
             //++++++----------------EMPTY TABLE----------------------++++=//
            tblModel.setRowCount(0);
            tblModelB.setRowCount(0);
            tblModelC.setRowCount(0);
            //++++++----------------REFRESH TABLE----------------------++++=//
            findBooks();
            findRequest();
            findBookRequests();
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
        
          
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
           int row = requesttable.getSelectedRow();
        DefaultTableModel tblModel = (DefaultTableModel) requesttable.getModel();
        DefaultTableModel tblModelB = (DefaultTableModel) booktable.getModel();
        
        String cell = requesttable.getModel().getValueAt(row, 0).toString();
        String cell2 = requesttable.getModel().getValueAt(row, 1).toString();
        
        String sql = "UPDATE requestlist SET availability2='Disapproved' WHERE requestID = " + cell;
      //  String sql2 = "UPDATE books SET availability='Not Available' WHERE bookid = " + cell2;
        
       //String sql3 = "insert into requestlist(bookid2, booktitle2, availability2, dateborrowed, borrower) values (?,?,?,?,?)";
        
        try{
                    try {
                        Class.forName("com.mysql.jdbc.Driver");
                    } catch (ClassNotFoundException ex) {
                        Logger.getLogger(Admin_Main_Interface.class.getName()).log(Level.SEVERE, null, ex);
                    }
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/librarymanagementsystem001?useSSL=false", "root", "cuteako");
            
             //++++++----------------UPDATE AVAILABILITY IN BOOKS----------------------++++=//
             PreparedStatement prepstmt = con.prepareStatement(sql);
             prepstmt.execute();
              //++++++----------------UPDATE STATUS IN REQUESTLIST----------------------++++=//
//             PreparedStatement prepstmt2 = con.prepareStatement(sql2);
//             prepstmt2.execute();
             
            
             JOptionPane.showMessageDialog(null, "Disapproved");
             
             //++++++----------------EMPTY TABLE----------------------++++=//
            tblModel.setRowCount(0);
            tblModelB.setRowCount(0);
            
            //++++++----------------REFRESH TABLE----------------------++++=//
            findBooks();
            findRequest();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
        

    }//GEN-LAST:event_jButton6ActionPerformed

    private void gotouserlistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gotouserlistActionPerformed
        // TODO add your handling code here:
          
        Users_List form = new Users_List();
        form.setVisible(true);
        form.pack();
        form.setLocationRelativeTo(null);
        this.dispose();
    }//GEN-LAST:event_gotouserlistActionPerformed

    private void gotoadminlistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gotoadminlistActionPerformed
        // TODO add your handling code here:
           
        Admin_List form = new Admin_List();
        form.setVisible(true);
        form.pack();
        form.setLocationRelativeTo(null);
        this.dispose();
    }//GEN-LAST:event_gotoadminlistActionPerformed

    private void logoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutActionPerformed
        // TODO add your handling code here:
        Admin_Login_Form form = new Admin_Login_Form();
        form.setVisible(true);
        form.pack();
        form.setLocationRelativeTo(null);

        this.dispose();
    }//GEN-LAST:event_logoutActionPerformed

    private void deletebookbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletebookbuttonActionPerformed
        
        int p = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete this book?", "Delete", JOptionPane.YES_NO_OPTION);
            
            if(p==0){
                    try{
                            int row = booktable.getSelectedRow();
                            String value = (booktable.getModel().getValueAt(row, 0).toString());
                            String sql="DELETE from books where bookid="+value;


                            PreparedStatement pst;
                            pst = My_CNX.getConnection().prepareStatement(sql);
                            pst.executeUpdate();

                            DefaultTableModel model = (DefaultTableModel)booktable.getModel();
                            model.setRowCount(0);
                            findBooks();

                            JOptionPane.showMessageDialog(null, "Deleted book.");
                            txtID.setText("");
                            txtTitle.setText("");
                            txtAuthor.setText("");
                            txtPublisher.setText("");
                            txtPubdate.setText("");
                            txtAvailability.setText("");
                        }
                        catch(Exception e){
                            JOptionPane.showMessageDialog(null, e);
                        }
            }
    }//GEN-LAST:event_deletebookbuttonActionPerformed

    private void booktableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_booktableMouseClicked
        // TODO add your handling code here:
        DefaultTableModel tblModel = (DefaultTableModel)booktable.getModel();
        
        String tblID = tblModel.getValueAt(booktable.getSelectedRow(), 0).toString();
        String tblTitle = tblModel.getValueAt(booktable.getSelectedRow(), 1).toString();
        String tblAuthor = tblModel.getValueAt(booktable.getSelectedRow(), 2).toString();
        String tblPublisher = tblModel.getValueAt(booktable.getSelectedRow(), 3).toString();
        String tblPubdate = tblModel.getValueAt(booktable.getSelectedRow(), 4).toString();
        String tblAvailability = tblModel.getValueAt(booktable.getSelectedRow(), 5).toString();
        
        txtID.setText(tblID);
        txtTitle.setText(tblTitle);
        txtAuthor.setText(tblAuthor);
        txtPublisher.setText(tblPublisher);
        txtPubdate.setText(tblPubdate);
        txtAvailability.setText(tblAvailability);
        
        
    }//GEN-LAST:event_booktableMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
        int p = JOptionPane.showConfirmDialog(null, "Are you sure you want to update this book?", "Update Book", JOptionPane.YES_NO_OPTION);
            
            if(p==0){
                    try{
                           int row = booktable.getSelectedRow();
                           String value = (booktable.getModel().getValueAt(row, 0).toString());
                           PreparedStatement pst;
                           
                           Class.forName("com.mysql.jdbc.Driver");
                           Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/librarymanagementsystem001?useSSL=false", "root", "cuteako");
                           pst = conn.prepareStatement("UPDATE books SET bookid =?, booktitle =?, bookauthor =?, publisher =?, publishing_date =?, availability =? WHERE bookid="+value);
                           
                           pst.setString(1,txtID.getText());
                           pst.setString(2,txtTitle.getText());
                           pst.setString(3,txtAuthor.getText());
                           pst.setString(4,txtPublisher.getText());
                           pst.setString(5,txtPubdate.getText());
                           pst.setString(6,txtAvailability.getText());
                           
                           pst.executeUpdate();
                           
                           
                            DefaultTableModel model = (DefaultTableModel)booktable.getModel();
                            model.setRowCount(0);
                            findBooks();

                            JOptionPane.showMessageDialog(null, "Updated book.");
                            
                            txtID.setText("");
                            txtTitle.setText("");
                            txtAuthor.setText("");
                            txtPublisher.setText("");
                            txtPubdate.setText("");
                            txtAvailability.setText("");
                            
                            
                        }
                        catch(Exception e){
                            JOptionPane.showMessageDialog(null, e);
                        }
            }
//        try {
//                 Class.forName("com.mysql.jdbc.Driver");
//                 Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/librarymanagementsystem001?useSSL=false", "root", "cuteako");
//                 pst = conn.prepareStatement("insert into books(bookid, booktitle, bookauthor, publisher, publishing_date, availability) values(?,?,?,?,?,?)");
//        }       
//        catch(){}
        
        
        
//        DefaultTableModel tblModel = (DefaultTableModel)booktable.getModel();
//        int SelectedRows = booktable.getSelectedRow();
//        try{
//            id = Integer.parseInt(RecordTable.getValueAt(SelectedRows, 0).toString());
//        }catch(){}
    }//GEN-LAST:event_jButton1ActionPerformed
    public void findBooks()
    {
        ArrayList<Books> books = ListBooks(searchbar1.getText());
        DefaultTableModel model = new DefaultTableModel();
        model.setColumnIdentifiers(new Object[]{"Id","Title","Author","Publisher", "Publishing Date", "Availability",});
        Object[] row = new Object[6];
        
        for(int i = 0; i < books.size(); i++)
        {
            row[0] = books.get(i).getBookid();
            row[1] = books.get(i).getBooktitle();  
            row[2] = books.get(i).getBookauthor();  
            row[3] = books.get(i).getPublisher();  
            row[4] = books.get(i).getPubdate();  
            row[5] = books.get(i).getAvailability();
            model.addRow(row);
        }
        
        booktable.setModel(model);
           
    }
     
    public void findRequest()
    {
        ArrayList<bookrequests> Bookrequests = ListRequest(searchbar.getText());
        DefaultTableModel model = new DefaultTableModel();
        model.setColumnIdentifiers(new Object[]{"Request ID","Book ID", "Title", "Status", "Date Borrowed", "Borrower"});
        Object[] row = new Object[6];
        
        for(int i = 0; i < Bookrequests.size(); i++)
        {
            row[0] = Bookrequests.get(i).getRequestID();
            row[1] = Bookrequests.get(i).getBookid2();  
            row[2] = Bookrequests.get(i).getBooktitle2();  
            row[3] = Bookrequests.get(i).getAvailability2();
            row[4] = Bookrequests.get(i).getDateBorrowed();
            row[5] = Bookrequests.get(i).getBorrower();
            
            model.addRow(row);
        }
        
        requesttable.setModel(model);
           
    }
     public void findBookRequests()
    {
        ArrayList<BookRequests2> bookrequests = ListBookRequests(searchbar2.getText());
        DefaultTableModel model = new DefaultTableModel();
        model.setColumnIdentifiers(new Object[]{"Borrow ID","Book ID","Title","Status", "Date Borrowed", "Borrower", "Librarian"});
        Object[] row = new Object[7];
        
        for(int i = 0; i < bookrequests.size(); i++)
        {
            row[0] = bookrequests.get(i).getBorrowID();
            row[1] = bookrequests.get(i).getBookid3();  
            row[2] = bookrequests.get(i).getBooktitle3();  
            row[3] = bookrequests.get(i).getAvailability3();
            row[4] = bookrequests.get(i).getDateBorrowed1();
            row[5] = bookrequests.get(i).getBorrower1(); 
            row[6] = bookrequests.get(i).getLibrarian(); 
            model.addRow(row);
        }
        
        bookrequesttable.setModel(model);
           
    }
    public ArrayList<Books> ListBooks(String ValToSearch){
    
        ArrayList<Books> booksList = new ArrayList<Books>();
            
        Statement st; 
        ResultSet rs;
        
        try{
            Connection con = getConnection();
            st = con.createStatement();
            String searchQuery = "SELECT * FROM `books` WHERE CONCAT (`bookid`, `booktitle`, `bookauthor`, `publisher`,`publishing_date`, `availability`) LIKE '%"+ValToSearch+"%'";
            rs = st.executeQuery(searchQuery);
            
            Books books;
            while(rs.next())
            {
                
                books = new Books(
                                    rs.getInt("bookid"),
                                    rs.getString("booktitle"),
                                    rs.getString("bookauthor"),
                                    rs.getString("publisher"),
                                    rs.getString("publishing_date"),
                                    rs.getString("availability")
                );
                
                booksList.add(books);
            
            }
        }
        
        catch(Exception ex){
            System.out.println(ex.getMessage());
        
        }
        return booksList;
    
    }
    
    public ArrayList<bookrequests> ListRequest(String ValToSearch){
    
        ArrayList<bookrequests> requestList = new ArrayList<bookrequests>();
            
        Statement st; 
        ResultSet rs;
        
        try{
            Connection con = getConnection();
            st = con.createStatement();
            String searchQuery = "SELECT * FROM `requestlist` WHERE CONCAT (`requestID`, `bookid2`, `booktitle2`, `availability2`, `dateborrowed`, `borrower`) LIKE '%"+ValToSearch+"%'";
            rs = st.executeQuery(searchQuery);
            
            bookrequests Bookrequests;
            while(rs.next())
            {
                
                Bookrequests = new bookrequests(
                                    
                                    rs.getInt("requestID"),
                                    rs.getInt("bookid2"),
                                    rs.getString("booktitle2"),
                                    rs.getString("availability2"),
                                    rs.getString("dateborrowed"),
                                    rs.getString("borrower")
                );
                
                requestList.add(Bookrequests);
            
            }
        }
        
        catch(Exception ex){
            System.out.println(ex.getMessage());
        
        }
        return requestList;
    
    }
    public ArrayList<BookRequests2> ListBookRequests(String ValToSearch){
    
        ArrayList<BookRequests2> bookrequestList = new ArrayList<BookRequests2>();
            
        Statement st; 
        ResultSet rs;
        
        try{
            Connection con = getConnection();
            st = con.createStatement();
            String searchQuery = "SELECT * FROM `borrowedhistory` WHERE CONCAT (`borrowedID` , `bookid3` , `booktitle3` ,`status`, `dateborrowed`, `borrower`, `librarian`) LIKE '%"+ValToSearch+"%'";
            rs = st.executeQuery(searchQuery);
            
            BookRequests2 bookrequest;
            while(rs.next())
            {
                
                bookrequest = new BookRequests2(
                                    rs.getInt("borrowedID"),
                                    rs.getInt("bookid3"),
                                    rs.getString("booktitle3"),
                                    rs.getString("status"),
                                    rs.getString("dateborrowed"),
                                    rs.getString("borrower"),
                                    rs.getString("librarian")
                                   
                );
                
                bookrequestList.add(bookrequest);
            
            }
        }
        
        catch(Exception ex){
            System.out.println(ex.getMessage());
        
        }
        return bookrequestList;
    
    }
    public void displayborrowedhistorytable(){
    
         try{
                // jLabel2.setText(String.valueOf(User.wc).toString());
                 Class.forName("com.mysql.jdbc.Driver");
                 Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/librarymanagementsystem001?useSSL=false", "root", "cuteako");

                 Statement st = conn.createStatement();

                 String sql = "SELECT * FROM `borrowedhistory` WHERE status = 'Returned' ";
                 ResultSet rs = st.executeQuery(sql);

                 while(rs.next()){
                     String borrowedID = String.valueOf(rs.getInt("borrowedID"));
                     String bookid3 = String.valueOf(rs.getInt("bookid3"));
                     String booktitle3 = String.valueOf(rs.getString("booktitle3"));
                     String status = String.valueOf(rs.getString("status"));
                     String dateborrowed = String.valueOf(rs.getString("dateborrowed"));
               //      String datereturned = String.valueOf(rs.getString("datereturned"));
                     String borrower = String.valueOf(rs.getString("borrower"));
                     String librarian = String.valueOf(rs.getString("librarian"));

                     String tbData[] = {borrowedID, bookid3, booktitle3, status, dateborrowed, borrower, librarian};
                     DefaultTableModel tblModel3 = (DefaultTableModel)borrowedhistory.getModel();

                     tblModel3.addRow(tbData);   
                 }
                 conn.close();
             }
             catch(Exception e){
                 System.out.println(e.getMessage());
             }
    }
    public void curDateTime(){
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("MM/dd/yyyy");
        LocalDateTime now = LocalDateTime.now();
        dateTime.setText(dtf.format(now));
    
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Admin_Main_Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Admin_Main_Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Admin_Main_Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Admin_Main_Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Admin_Main_Interface().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable bookrequesttable;
    private javax.swing.JTable booktable;
    private javax.swing.JTable borrowedhistory;
    private javax.swing.JLabel close;
    private javax.swing.JLabel dateTime;
    private javax.swing.JButton deletebookbutton;
    private javax.swing.JButton gotoadminlist;
    private javax.swing.JButton gotouserlist;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JButton logout;
    private javax.swing.JLabel minimize;
    private javax.swing.JTable requesttable;
    private javax.swing.JButton search1;
    private javax.swing.JButton search2;
    private javax.swing.JButton search3;
    private javax.swing.JTextField searchbar;
    private javax.swing.JTextField searchbar1;
    private javax.swing.JTextField searchbar2;
    private javax.swing.JTextField txtAuthor;
    private javax.swing.JTextField txtAvailability;
    private javax.swing.JTextField txtID;
    private javax.swing.JTextField txtPubdate;
    private javax.swing.JTextField txtPublisher;
    private javax.swing.JTextField txtTitle;
    // End of variables declaration//GEN-END:variables
}
